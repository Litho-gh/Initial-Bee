[gd_scene load_steps=22 format=3 uid="uid://by7hfw35tmwbi"]

[ext_resource type="Script" uid="uid://dcqlx25iavu1b" path="res://Levels/Level.gd" id="1_7xgnh"]
[ext_resource type="Texture2D" uid="uid://blpivun3q78jx" path="res://Levels/asphalt_02_4k.blend/textures/asphalt_02_diff_4k.jpg" id="2_ri8g7"]
[ext_resource type="Texture2D" uid="uid://bp853bjbn6yv1" path="res://Levels/asphalt_02_4k.blend/textures/0482addebebc9db1cedc2a4cb35a9d15.webp" id="3_r6we3"]
[ext_resource type="Script" uid="uid://bdadjae08bnj" path="res://Levels/obstacle_spawner.gd" id="4_ddnc3"]

[sub_resource type="Shader" id="Shader_r6we3"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.4.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform ivec2 albedo_texture_size;
uniform float point_size : hint_range(0.1, 128.0, 0.1);

uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_metallic : hint_default_white, filter_linear_mipmap, repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r, filter_linear_mipmap, repeat_enable;

uniform float specular : hint_range(0.0, 1.0, 0.01);
uniform float metallic : hint_range(0.0, 1.0, 0.01);

uniform sampler2D texture_refraction : filter_linear_mipmap, repeat_enable;
uniform float refraction : hint_range(-1.0, 1.0, 0.001);
uniform vec4 refraction_texture_channel;
uniform sampler2D screen_texture : hint_screen_texture, repeat_disable, filter_linear_mipmap;
uniform sampler2D depth_texture : hint_depth_texture, repeat_disable, filter_nearest;

uniform sampler2D texture_normal : hint_roughness_normal, filter_linear_mipmap, repeat_enable;
uniform float normal_scale : hint_range(-16.0, 16.0);
varying vec3 uv1_triplanar_pos;

uniform float uv1_blend_sharpness : hint_range(0.0, 150.0, 0.001);
varying vec3 uv1_power_normal;

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

void vertex() {
	vec3 normal = MODEL_NORMAL_MATRIX * NORMAL;

	TANGENT = vec3(0.0, 0.0, -1.0) * abs(normal.x);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.y);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.z);
	TANGENT = inverse(MODEL_NORMAL_MATRIX) * normalize(TANGENT);

	BINORMAL = vec3(0.0, 1.0, 0.0) * abs(normal.x);
	BINORMAL += vec3(0.0, 0.0, -1.0) * abs(normal.y);
	BINORMAL += vec3(0.0, 1.0, 0.0) * abs(normal.z);
	BINORMAL = inverse(MODEL_NORMAL_MATRIX) * normalize(BINORMAL);

	// UV1 Triplanar: Enabled (with World Triplanar)
	uv1_power_normal = pow(abs(normal), vec3(uv1_blend_sharpness));
	uv1_triplanar_pos = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz * uv1_scale + uv1_offset + TIME * .2;
	uv1_power_normal /= dot(uv1_power_normal, vec3(1.0));
	uv1_triplanar_pos *= vec3(1.0, -1.0, 1.0);
}

vec4 triplanar_texture(sampler2D p_sampler, vec3 p_weights, vec3 p_triplanar_pos) {
	vec4 samp = vec4(0.0);
	samp += texture(p_sampler, p_triplanar_pos.xy) * p_weights.z;
	samp += texture(p_sampler, p_triplanar_pos.xz) * p_weights.y;
	samp += texture(p_sampler, p_triplanar_pos.zy * vec2(-1.0, 1.0)) * p_weights.x;
	return samp;
}

void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo, uv1_power_normal, uv1_triplanar_pos);
	ALBEDO = albedo.rgb * albedo_tex.rgb;

	float metallic_tex = dot(triplanar_texture(texture_metallic, uv1_power_normal, uv1_triplanar_pos), metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	float roughness_tex = dot(triplanar_texture(texture_roughness, uv1_power_normal, uv1_triplanar_pos), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;

	// Normal Map: Enabled
	NORMAL_MAP = triplanar_texture(texture_normal, uv1_power_normal, uv1_triplanar_pos).rgb;
	NORMAL_MAP_DEPTH = normal_scale;

	// Refraction: Enabled (with normal map texture)
	vec3 unpacked_normal = NORMAL_MAP;
	unpacked_normal.xy = unpacked_normal.xy * 2.0 - 1.0;
	unpacked_normal.z = sqrt(max(0.0, 1.0 - dot(unpacked_normal.xy, unpacked_normal.xy)));
	vec3 ref_normal = normalize(mix(
			NORMAL,
			TANGENT * unpacked_normal.x + BINORMAL * unpacked_normal.y + NORMAL * unpacked_normal.z,
			NORMAL_MAP_DEPTH));
	vec2 ref_ofs = SCREEN_UV - ref_normal.xy * dot(triplanar_texture(texture_refraction, uv1_power_normal, uv1_triplanar_pos), refraction_texture_channel) * refraction;

	float ref_amount = 1.0 - albedo.a * albedo_tex.a;

	float refraction_depth_tex = textureLod(depth_texture, ref_ofs, 0.0).r;
	vec4 refraction_view_pos = INV_PROJECTION_MATRIX * vec4(SCREEN_UV * 2.0 - 1.0, refraction_depth_tex, 1.0);
	refraction_view_pos.xyz /= refraction_view_pos.w;

	// If the depth buffer is lower then the model's Z position, use the refracted UV, otherwise use the normal screen UV.
	// At low depth differences, decrease refraction intensity to avoid sudden discontinuities.
	EMISSION += textureLod(screen_texture, mix(SCREEN_UV, ref_ofs, smoothstep(0.0, 1.0, VERTEX.z - refraction_view_pos.z)), ROUGHNESS * 8.0).rgb * ref_amount * EXPOSURE;
	ALBEDO *= 1.0 - ref_amount;
	// Force transparency on the material (required for refraction).
	ALPHA = 1.0;
}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_7xgnh"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_ri8g7"]
seamless = true
as_normal_map = true
noise = SubResource("FastNoiseLite_7xgnh")

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_r6we3"]
seamless = true
as_normal_map = true
noise = SubResource("FastNoiseLite_7xgnh")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ddnc3"]
render_priority = 0
shader = SubResource("Shader_r6we3")
shader_parameter/albedo = Color(0.0746728, 0.169634, 0.172605, 0.541176)
shader_parameter/albedo_texture_size = Vector2i(0, 0)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 0.0
shader_parameter/metallic_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/texture_refraction = SubResource("NoiseTexture2D_r6we3")
shader_parameter/refraction = 0.05
shader_parameter/refraction_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/texture_normal = SubResource("NoiseTexture2D_ri8g7")
shader_parameter/normal_scale = 1.0
shader_parameter/uv1_blend_sharpness = 1.0
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)

[sub_resource type="BoxMesh" id="BoxMesh_eyb4p"]
material = SubResource("ShaderMaterial_ddnc3")
size = Vector3(200, 200, 1)

[sub_resource type="ProceduralSkyMaterial" id="ProceduralSkyMaterial_n5iyr"]
sky_top_color = Color(0.253988, 0.30759, 0.382141, 1)
sky_horizon_color = Color(0.400047, 0.409255, 0.42379, 1)
sky_cover_modulate = Color(0.362829, 0.362829, 0.362829, 1)
ground_bottom_color = Color(0.194129, 0.163823, 0.128629, 1)

[sub_resource type="Sky" id="Sky_mcyyx"]
sky_material = SubResource("ProceduralSkyMaterial_n5iyr")

[sub_resource type="Environment" id="Environment_3yhe6"]
background_mode = 2
sky = SubResource("Sky_mcyyx")

[sub_resource type="BoxShape3D" id="BoxShape3D_n5iyr"]
size = Vector3(44.1823, 20, 20)

[sub_resource type="PlaneMesh" id="PlaneMesh_3yhe6"]

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_eyb4p"]
albedo_texture = ExtResource("3_r6we3")

[sub_resource type="PlaneMesh" id="PlaneMesh_ddnc3"]
material = SubResource("StandardMaterial3D_eyb4p")
size = Vector2(50, 2)

[sub_resource type="Curve3D" id="Curve3D_e3isc"]
closed = true
_data = {
"points": PackedVector3Array(-0.839691, 0, 29.4105, 0.839691, 0, -29.4105, -252.736, -4.61687, 188.217, 6.14127, 0, 33.0738, -6.14127, 0, -33.0738, -260.358, -4.61687, 87.6021, 4.72177, 0, 39.7719, -4.72177, 0, -39.7719, -301.519, -4.61687, 32.7214, 0, 0, 0, 0, 0, 0, -261.883, -4.61687, -60.271, -30.5897, 0, 15.579, 30.5897, 0, -15.579, -220.601, -4.61687, -113.514, -37.6917, 0, -14.7802, 37.6917, 0, 14.7802, -141.45, -4.61687, -78.5645, -46.9184, 0, 14.4973, 46.9184, 0, -14.4973, -34.7374, -4.61687, -104.48, -54.308, 0, -8.2647, 54.308, 0, 8.2647, 73.4996, -4.61687, -124.299, -14.0877, 0, -58.3119, 14.0877, 0, 58.3119, 154.296, -4.61687, -49.5997, 21.4703, 0, -53.4031, -21.4703, 0, 53.4031, 113.136, -4.61687, 134.861, 25.3819, 0, 17.1514, -25.3819, 0, -17.1514, -15.5447, -4.61687, 137.484, 74.4386, 0, -6.00088, -74.4386, 0, 6.00088, -107.912, -4.61687, 61.6862, -28.2833, 0, -22.6758, 28.2833, 0, 22.6758, -165.841, -4.61687, 182.119, -20.8159, 0, -62.4475, 20.8159, 0, 62.4475, -52.7661, -4.61687, 227.028, 21.0001, 0, 34.399, -21.0001, 0, -34.399, -249.687, -4.61687, 288.832),
"tilts": PackedFloat32Array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
}
point_count = 15

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_r6we3"]
albedo_texture = ExtResource("2_ri8g7")
uv1_scale = Vector3(0.1, 0.1, 0.1)
uv1_triplanar = true

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_7xgnh"]
albedo_color = Color(0, 0, 0, 1)

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_ri8g7"]
albedo_color = Color(0, 0, 0, 1)

[node name="Level" type="Node3D" node_paths=PackedStringArray("track", "checkpoint")]
script = ExtResource("1_7xgnh")
track = NodePath("Path")
checkpoint = NodePath("Track/checkpoint")
metadata/_custom_type_script = "uid://dcqlx25iavu1b"

[node name="Ocean" type="MeshInstance3D" parent="."]
transform = Transform3D(11.8608, 0, 0, 0, 0.0640803, 0, 0, 0, 1924.72, 0, -4.01863, 0)
mesh = SubResource("BoxMesh_eyb4p")

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_3yhe6")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="WorldEnvironment"]
transform = Transform3D(0.9978, -0.0235282, -0.0619794, 0.0438318, 0.935536, 0.350502, 0.0497372, -0.352448, 0.934509, -3.33476, 22.3275, 93.4495)
light_color = Color(0.296065, 0.383685, 0.867188, 1)
light_energy = 0.14
light_indirect_energy = 0.812
light_angular_distance = 8.75
light_negative = true
light_specular = 0.97
shadow_enabled = true
sky_mode = 2

[node name="Track" type="Node3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 4.61687, 0)

[node name="checkpoint" type="Area3D" parent="Track"]
transform = Transform3D(0.910496, 0, -0.413518, 0, 1, 0, 0.413518, 0, 0.910496, 6.2816, 1.63214, -113.028)
collision_mask = 65535

[node name="CollisionShape3D" type="CollisionShape3D" parent="Track/checkpoint"]
transform = Transform3D(0.717567, 0, -0.696489, 0, 1, 0, 0.696489, 0, 0.717567, -1.0022, -0.590285, 1.30079)
shape = SubResource("BoxShape3D_n5iyr")

[node name="MeshInstance3D" type="MeshInstance3D" parent="Track/checkpoint"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -2.12397, 0)
mesh = SubResource("PlaneMesh_3yhe6")

[node name="Finish Line" type="MeshInstance3D" parent="Track"]
transform = Transform3D(0.218723, 0, -7.18015, 0, 1, 0, 0.599861, 0, 2.61804, 0, 0.0890274, -116.81)
mesh = SubResource("PlaneMesh_ddnc3")
skeleton = NodePath("../..")

[node name="SpawnPoints" type="Node3D" parent="."]
transform = Transform3D(0.894615, 0, -0.446838, 0, 1, 0, 0.446838, 0, 0.894615, -20.8813, 5.54447, -112.148)

[node name="Marker3D" type="Marker3D" parent="SpawnPoints" groups=["spawn_points"]]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 1.9986, 0, -7.66129)

[node name="Marker3D2" type="Marker3D" parent="SpawnPoints" groups=["spawn_points"]]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 8.21646, 0, -2.88686)

[node name="Marker3D3" type="Marker3D" parent="SpawnPoints" groups=["spawn_points"]]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -9.90054, 0, 4.42823)

[node name="Marker3D4" type="Marker3D" parent="SpawnPoints" groups=["spawn_points"]]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -3.68267, 0, 9.20266)

[node name="Marker3D5" type="Marker3D" parent="SpawnPoints" groups=["spawn_points"]]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -19.515, 0, 13.7572)

[node name="Marker3D6" type="Marker3D" parent="SpawnPoints" groups=["spawn_points"]]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -13.2972, 0, 18.5316)

[node name="Marker3D7" type="Marker3D" parent="SpawnPoints" groups=["spawn_points"]]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -27.6701, 0, 26.9572)

[node name="Marker3D8" type="Marker3D" parent="SpawnPoints" groups=["spawn_points"]]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -21.4523, 0, 31.7316)

[node name="ObstacleSpawner" type="Node3D" parent="."]
script = ExtResource("4_ddnc3")

[node name="Path" type="Path3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 4.61687, 0)
curve = SubResource("Curve3D_e3isc")

[node name="Road" type="CSGPolygon3D" parent="Path"]
material_override = SubResource("StandardMaterial3D_r6we3")
use_collision = true
flip_faces = true
polygon = PackedVector2Array(-16, 0, -16, 0.1, 16, 0.1, 16, 0)
mode = 2
path_node = NodePath("..")
path_interval_type = 0
path_interval = 1.0
path_simplify_angle = 0.0
path_rotation = 2
path_rotation_accurate = false
path_local = false
path_continuous_u = true
path_u_distance = 1.0
path_joined = true

[node name="LeftWall" type="CSGPolygon3D" parent="Path"]
use_collision = true
polygon = PackedVector2Array(-16, 0, -16, 1, -15.8, 1, -15.8, 0)
mode = 2
path_node = NodePath("..")
path_interval_type = 0
path_interval = 0.1
path_simplify_angle = 0.0
path_rotation = 2
path_rotation_accurate = false
path_local = false
path_continuous_u = true
path_u_distance = 1.0
path_joined = true
material = SubResource("StandardMaterial3D_7xgnh")

[node name="RightWall" type="CSGPolygon3D" parent="Path"]
use_collision = true
polygon = PackedVector2Array(16, 0, 16, 1, 16.2, 1, 16.2, 0)
mode = 2
path_node = NodePath("..")
path_interval_type = 0
path_interval = 1.0
path_simplify_angle = 0.0
path_rotation = 2
path_rotation_accurate = false
path_local = false
path_continuous_u = true
path_u_distance = 1.0
path_joined = false
material = SubResource("StandardMaterial3D_ri8g7")
